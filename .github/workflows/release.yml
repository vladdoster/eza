name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    tags: ["*"]
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

  release:
    needs: ["create-release"]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact-name: eza-windows-x86_64
            artifact-alias: eza-win64
            cargo-target: x86_64-pc-windows-msvc
            use-cross: true
          - os: ubuntu-20.04
            artifact-name: eza-linux-x86_64
            artifact-alias: eza-linux
            cargo-target: x86_64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-20.04
            artifact-name: eza-linux-x86_64-musl
            cargo-target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-20.04
            artifact-name: eza-linux-aarch64
            cargo-target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            use-cross: true
          - os: macos-latest
            artifact-name: eza-macos-x86_64
            artifact-alias: eza-macos
            cargo-target: x86_64-apple-darwin
            use-cross: true
          - os: macos-latest
            artifact-name: eza-macos-aarch64
            cargo-target: aarch64-apple-darwin
            use-cross: true


    name: Build (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.cargo-target }}

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.cargo-target }} in
              *linux*)
                  sudo apt-get -y update; sudo apt-get -y install musl-gcc musl-tools musl-dev gcc-multilib
                  case ${{ matrix.cargo-target }} in
                      arm-unknown-linux-*) sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
                      aarch64-unknown-linux-gnu) sudo apt-get -y install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu ;;
                  esac ;;
          esac

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.cargo-target }}

      - name: Install cross
        if: matrix.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Overwrite build command env variable
        if: matrix.use-cross
        shell: bash
        run: echo "BUILD_CMD=cross" >> $GITHUB_ENV

      - name: Install Linker packages
        if: ${{ matrix.linker != '' }}
        run: |
          sudo apt update
          sudo apt install ${{ matrix.linker }}

      - name: Build Binary (All features)
        shell: bash
        run: |
          rustup target add ${{ matrix.cargo-target }}
          $BUILD_CMD build --locked --release --target=${{ matrix.cargo-target }}
          cargo build --verbose --locked --release --target ${{ matrix.cargo-target }}
        env:
          CARGO_TARGET_DIR: output

      - name: Setup Archive + Extension
        shell: bash
        run: |
          mkdir -p staging

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "output/${{ matrix.cargo-target }}/release/eza.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "output/${{ matrix.cargo-target }}/release/eza" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: release.zip

      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ matrix.artifact-name }}.zip
          asset_content_type: application/zip

      # TODO: Remove this after deprecation notice
      - name: Upload Binary to Release aliases
        if: ${{ matrix.artifact-alias != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ matrix.artifact-alias }}.zip
          asset_content_type: application/zip
